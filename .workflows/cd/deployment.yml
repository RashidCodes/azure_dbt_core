# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

resources:
- repo: self

name: 'Deploy container app job'

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '8942520e-d3c7-4ef1-9fd6-c01b1ee990a1'
  imageRepository: 'midrangepullup'
  containerRegistry: 'midrangepullup.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/transform/Dockerfile'
  tag: '$(Build.BuildId)'
  container_app_job_name: 'midrangepullup'
  container_app_job_env_name: 'new-environment'
  container_app_job_rg: 'new_rg'
  pip_download_dir: $(Pipeline.Workspace)/.pip

  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  
pool:
  vmImage: $(vmImageName)


stages:
- stage: Build
  displayName: Build
  jobs:
  - job: Build
    displayName: Build and push to ACR
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

  - job: Publish
    displayName: Publish DBT Artifacts
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: |
        # top level directory
        export TOP_DIR=$(git rev-parse --show-toplevel)
        pip install -r ${TOP_DIR}/transform/requirements.txt --no-index --find-links=$(pip_download_dir)

        # change directory into the adventureworks dbt project
        cd ${TOP_DIR}/transform/adventureworks

        # generate docs
        dbt docs generate --target prod --profiles-dir .

        # get docs
        mkdir -p public;
        cp target/index.html public/
        cp target/catalog.json public/
        cp target/manifest.json public/
        cp target/run_results.json public/

        # Upload dbt artifacts
        az login --service-principal -u $(SP_USER) -p $(SP_PASS) --tenant $(TENANT_ID)
        az storage blob upload-batch \
        --destination dbtdocs \
        --connection-string ${CONNECTION_STRING} \
        --source public \
        --overwrite true

        # clean up
        rm -rf public
      env:
        CONNECTION_STRING: $(CONNECTION_STRING)
        SNOWFLAKE_USERNAME: $(SNOWFLAKE_USERNAME)
        SNOWFLAKE_PASSWORD: $(SNOWFLAKE_PASSWORD)
        SNOWFLAKE_ACCOUNT: $(SNOWFLAKE_ACCOUNT)
        SP_USER: $(SP_USER)
        SP_PASS: $(SP_PASS)
        TENANT_ID: $(TENANT_ID)
      displayName: 'Publish dbt artifacts'

- stage: Deploy
  displayName: Deploy ContainerApp Job in Azure
  jobs:
  - job: Deploy
    steps:
    - script: |
        bash .workflows/bin/deploy_container_app_job.sh
      env:
        SNOWFLAKE_USERNAME: $(SNOWFLAKE_USERNAME)
        SNOWFLAKE_PASSWORD: $(SNOWFLAKE_PASSWORD)
        SNOWFLAKE_ACCOUNT: $(SNOWFLAKE_ACCOUNT)
        CONTAINER_APP_JOB_NAME: $(container_app_job_name)
        CONTAINER_APP_JOB_RG: $(container_app_job_rg)
        CONTAINER_APP_JOB_ENV_NAME: $(container_app_job_env_name)
        CONTAINER_REGISTRY: $(containerRegistry)
        REGISTRY_USER: $(REGISTRY_USER)
        REGISTRY_PASSWORD: $(REGISTRY_PASSWORD)
        SP_USER: $(SP_USER)
        SP_PASS: $(SP_PASS)
        TENANT_ID: $(TENANT_ID)
        IMAGE_NAME: $(imageRepository)
        VERSION: $(tag)
      displayName: 'Create a dbt job run in an azure container app'
